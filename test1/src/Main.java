public class Main {
    public static void main(String[] args) {


        // ** 변수 선언 방법
        int i = 10;
        System.out.println("i의 값은 " + i);

        // ** 특수문자 사용이 가능 (_, $) 만 사용가능
        // int user_id;
        // int user_email; 이런식으로 변수이름 표현가능








        System.out.println("Hello world!");
        System.out.println("Hello world!");

        // lvalue = rvalue
        // lvalue : 좌측에 있는 벨류를 의미함
        // rvalue : 우측에 있는 벨류를 의미함

        // 변수 선언
        int number; // <- 이게 변수를 선언한 코드

        // 변수 초기화
        number = 10; // <- 변수를 초기화했다는 코드(10이란 값으로 number이란 변수에 값을 초기 저장했다라는 말)
                     // number이 변수이고 10이 상수라고 함
                     // lvalue는 흔히 변수들을 의미하고 rvalue는 10을 흔히 부른다고 함


        // 변수 선언과 동시에 값을 초기화해주는 코드
        int num = 100;

        System.out.println("number와 num의 합은 " + (number + num) + "입니다");


        // ******************************************************************
        // [자 료 형]
        // ******************************************************************

        // 수 : 양수, 음수로 나눠지고 각각 정수와 실수를 가지고 있음

        /* 자료형의 종류

        * [정수형 datatype]
        * char(캐릭터형태의 약자어임) : 문자를 나타날 때 사용을 함 / 사실 정수형이지만 문자를 표현할 때 사용함
                                  : 2byte 정수형
         숫자
        * byte : 1 byte
        * short : 2 byte
        * int : 4 byte
        * long : 8 byte


        *[실수형 datatype]
        * float : 4 byte
        * double : 8 byte

        *[논리형 datatype]
        * boolean

        */

        // 00000000 : 0 하나가 1비트라고 예를 들면 0이 여덟개이니 1비트가 8개 보이면 8bit가 되어서 8bit는 1byte로 대체할 수 있어서 1byte라고 할수 있음

        // 1바이트에서 맨 앞에 0을 띄우면 맨 앞 0(무조건 맨앞은 부호가 됨)은 부호[0]가 되고 뒤에 것들 [0000000]은 값이 됨
        // [0] [0000000] // 0 0000000
        // 내가 만약에 부호자리에 마이너스 부호를 붙여주고 싶으면 1을 붙여주고, 플러스 부호는 부호가 없다라는 뜻(우리가 일반적으로 아는 정수개념)에서 위처럼 0이라고 적어주면 됨



        // ** 2진수의 개념을 잘 알고 있어야 한다고 함 **

        //[0]0000000 = 0
        //[0]0000001 = 1
        //[0]0000010 = 2 2진수에서 10은 2임
        //[0]0000011 = 3
        //[0]0000100 = 4
        //[0]0000101 = 5
        //[0]0000110 = 6
        //[0]0000111 = 7
        //[0]0001000 = 8

        // ========================================
        // ** 2의 보수 :
        //[0]0000001 = 1

        // 1단계 : 반전
        // [1]1111110
        // 비트를 반전 시킨다

        // ▽ ▽ ▽ ▽ ▽ ▽
        // 2단계 : +1
        // [1]1(64) 1(32) 1(16) 1(8) 1(4) 1(2) 1(1) = 127

        // [1]1111111 = -1

        // 아래는 short임
        // [0] [0000000  00000000]

        // --------------------------------------
        // 부호          값
        // [0] [1111111 11111111] = 32767 (2바이트짜리니깐 Short의 가장 큰 정수는 32767임)

        // 1단계 : 반전
        // [1] [0000000 00000000] = -32768

        // [1] [0000000 00000001] = -32768

        // ** 마지막 값
        // [1] [0000000 00000000] = -32768





        //===================================
        // 부동 소수점
        //==================================
        // 부호 [지수부=2byte] = 8개 [가수부=2byte] 23개
        // [0] [0000000].[000000000000000000000000]

        // float을 예를 들었음(float=4바이트)
        // float : 소수점 일곱번째 자리까지 쓸모있는 값이라고 할 수 있음
        // double도 소수점 15번쨰 자리까지만 쓸모있는 값들이고 그 뒤에 값들은 버리면 된다고 함 
        
        
        //===================================
        // 고정 소수점
        //===================================
        // [정수부=2byte]       [실수부=2byte]
        // 00000000 00000000.00000000 00000000

    }
}