public class Main {
    public static void main(String[] args) {
        /*
        int number = 10;
        int number1 = 100;
        int number2 = 200;
        int number3 = 300;
        int number4 = 400;
        int number5 = 500;
        */
        //int[] numArr;
        //int arrNum[]; // 둘 다 같은 표현임


        // ===================================================
        // ** null은 아무것도 없는 상태
        // ** " " : Space 한 칸이 있는 상태
        // ** 이 둘의 출력의 상태는 동일하지만 전혀 다른 값임

        String st1 = " ";
        String st2 = " ";
        // ===================================================
        // ** 배열의 초기화
        {
            int[] numArr;
            //int arrNum[] = null; // null : 아무것도 존재하지 않는다라는 뜻임
            // null은 아무것도 없는 공간, SP(스페이스바를 친 것과 같은 보이는 건 없지만 어떤 공간은 있는 것 : " " ← 이런 문자열 초기화값이 있다는 뜻)
            // 이 안에 null값 있잖아요 이런 말하면 모순이라고 함
            // null은 안에 아무것도 없는 것을 의미함
            // null은 값이 아니라고 함


            // ** 초기화 되지 않은 배열은 에러
            //System.out.println(numArr[0]); // 지금 이 코드에서 컴파일 오류나는 이유는
            // 배열에 어떤 값도 초기화 / 대입(저장)해주지 않았기 때문임

            //System.out.println(arrNum[0]);
        }
        // ===================================================
        {
            // ** 배열 초기화 방법
            // int number[] = new int[5]; ← C 스타일 문법
            // int[] number= new int[5]; ← C# 스타일 문법
            // 자바는 둘 다 허용함

            int[] number = new int[5];

            // ** 원소에 값을 초기화
            number[0] = 10;
            number[1] = 20;
            number[2] = 30;
            number[3] = 40;
            number[4] = 50;

            // 각각의 원소를 출력한다
            System.out.println( // 얘는 줄 바꿈 없이 그냥 한 줄에 출력하는 표현
                    number[0] + "\t" + // 출력해보면 탭 1개 쓴 만큼 띄워서 표현함
                            number[1] + "\t" +
                            number[2] + "\t" +
                            number[3] + "\t" +
                            number[4] + "\t"
                    //number[0] + " " // 이렇게 스페이스 하나치면서 숫자의 간격을 띄워서 출려갛ㄹ수도 있음
                    //number[1] + " "
                    //number[2] + " "
                    //number[3] + " "
                    //number[4] + " "
            );

        }
        // ===================================================
        {
            int[] Number = new int[5]; // 배열의 길이를 5로 선언하면서 Number라는 이름의 객체(배열)를 생성한거임

            for (int i = 0; i < 5; ++i) {
                Number[i] = i * 10 + 10;
                System.out.println(Number[i]); // println이라는 메서드 특성 때문에 줄바꿈하면서 하나씩 출력하는 표현
            }


        }
        // ===================================================
        {
            // ** 배열 초기화의 다른 방법
            //
            String[] Arr = {"홍길동", "김유신", "이순신", "임꺽정"};

            System.out.println("배열의 길이 : " + Arr.length);

            for (int i = 0; i < Arr.length; ++i) {

                System.out.println(Arr[i]);
            }
        }
        //======================================================

        // 배열의 장점
        // * 데이터와 데이터(원소와 원소사이) 사이의 간격이 없음
        // * 이유: 일렬로 존재하기 때문임
        // * 그리고 데이터와 데이터의 접근성이 좋음(원소와 원소 사이의 간격이 없기 때문)
        // 그렇다고 접근속도가 빠른게 아니라, 그냥 데이터에 접근속도가 항상 일정하다

        // 길이가 5라면 그 5인 이유는?
        // 데이터 길이가 실제 20 bite만큼이기 때문임
        // int형 배열의 한 데이터가 담길 수 있는 하나의 int(각 인덱스)가 4bite임
        // 공간을 한 번에 할당을 했지만 그거를 나눠서 사용하는 개념임

        // 배열 길이가 몇 길이이던 그 배열을 집 한 채라고 생각해야함
        // 아파트도 1채를 1동으로 봄 1동에 여러 가구들이 있어도

        // int[] : int가 하나인거고 그 int를 나눠서 쓰는거지, 그 배열 안에 여러 공간이 있다고 각각의 다른 공간이 있다고 생각하지 마라고 함
        // 여러 개의 int가 모인게 아님

        // int[]는 크기가 가변적일 수 없다. 한 개의 데이터공간당 4byte이기 때문임

        //======================================================
        {
            int[] numbers = new int[6];
            int index = 0;


            while(true){
                // ** 1 ~ 45 사이의 난수를 생성
                int num = (int) (Math.random() * 45) + 1;

                // ** true || false
                boolean insert = true;// true거나 false 둘 중에 하나만 반환함

                // ** 리스트에 같은 값이 있는지 확인
                for(int i = 0; i <= index; ++i){
                    // ** 만약 같은 값이 존재한다면.. 
                    if(numbers[index] == num){
                        // ** 데이터를 넣지 못하게 함
                        insert = false;
                        break;
                    }
                 }

                //** 같은 값이 없을 떄..
                if(insert == true){
                    // ** 리스트에 값을 추가한다
                    numbers[index] = num;
                    // ** 인덱스를 증가사킨다
                    ++index;
                }
                
                // ** 리스트가 모두 완성되었다면 반복문을 탈출한다
                if(index == 6) break; // 실행코드가 이렇게 엄청짧으면 그냥 이렇게 써준다고 함
                
            }
            
            // 로또 번호 출력
            for(int i = 0; i < 6; ++i){
                System.out.println(numbers[i]);
            }

        }




    }
}